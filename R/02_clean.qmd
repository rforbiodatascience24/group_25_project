---
title: "Clean Data"
format:
  html:
    embed-resources: true
editor: visual
---

This script will tidy the data to prepare it for visualization and analysis.

```{r}
library("tidyverse")
```

```{r}

reads_df <- read_tsv("../data/01_data_load_reads.tsv.gz")
RPMs_df <- read_tsv("../data/01_data_load_RPMs.tsv.gz")
RPKMs_df <- read_tsv("../data/01_data_load_RPKMs.tsv.gz")
```

```{r}
df <- reads_df |> 
  full_join(RPMs_df,
            by = c("...1", "GeneName", "description"),
            relationship = "many-to-many") |> 
  full_join(RPKMs_df,
            by = c("...1", "GeneName", "description"),
            relationship = "many-to-many")
```

The data set is messy: the .x values corresponds to the reads dataframe, the .y to tge RPMs dataframe and the reamining values correspond to the RPKMs_df. - Rename columns - Check for invalid values - Remove unnecessary observations - Create a meta_data file to store relevant information about all genes

1.  Rename columns

First we create a small df with all 21 column names

```{r}
info <- c("reads", "RPM", "RPKM")
conditions <- c("_control_", "_tau_")
samples <- 1:3

col_names <- expand_grid(
  info,
  conditions,
  samples)

```

```{r}
col_names <- col_names |> 
  mutate(full_names = str_c(info,
                       conditions,
                       samples)) |> 
  pull(full_names)
```

Now we rename all the columns

```{r}
df <- df |> 
  rename_with(~ col_names,
              .cols = 4:21) |> 
  rename(gene_ensembl = 1,
         gene_ID = 2)
```

2.  Check for invalid data

Before removing genes with no expression, we can check if our dataset has any missing values or invalid values

```{r}
df |> 
  select(-description) |> 
  anyNA()
```

```{r}
df |> 
  select(-description, -gene_ensembl, -gene_ID) |> 
  is_character()
```

The data seems to not have any invalid or missing values.

3.  Remove unnecessary observations

We will eliminate all the observations for which all of the variables have a value of 0.

```{r}
df |> 
  dim()
```

```{r}
df <- df |>
  filter(!if_all(4:21, ~ . == 0))

df |> 
  dim()
```

Around 30000 genes were removed.

4.  Create a meta data file

Next, we will remove the columns that we don't need, specifically the gene_esembl and description columns. We will also create a separate dataframe with the information about the genes.

```{r}
gene_info <- df |> 
  select(gene_ensembl, gene_ID, description)
```

We can separate the description column to look more clean

```{r}
gene_info <- gene_info |> 
  separate(
    col = description,
    into = c("description", "source"),
    sep = "(\\[)"
  ) |> 
  mutate(source = str_remove(source, "\\]"))
```

```{r}
df <- df |>
  select(-description, -gene_ensembl)
```

The data is now tidy:

-   Each row corresponds to an observation (unique combination of an experiment and gene).

-   Each column corresponds to a variable (What gene, what type of experiment and the expression of the gene).

-   Each cell is a value.

Save the tidy data.

```{r}
df |> 
  write_tsv(file = "../data/02_data_load.tsv.gz")

gene_info |> 
  write_tsv(file = "../data/meta_data.tsv.gz")
```
