---
title: "Augment data"
format:
  html:
    embed-resources: true
editor: visual
---

## Load data and relevant libraries

```{r}
#| message: false
library("tidyverse")
library("dplyr")
```

```{r}
data_dir <- "../data"
data_file <- "/02_data_load.tsv.gz" 
aug_input <- read_tsv(str_c(data_dir, data_file))

```

## Normalizing the data by log transformation.

Adding a small value before log transforming data, to ensure that zeros do not appear.

```{r}
log_df <- aug_input |> 
  mutate(across(starts_with("reads") | starts_with("RPM") | starts_with("RPKM"),~ log2(.+0.0001)))
```

## Filter out genes with high standard deviation between replicates

Since we wish to use the mean of the replicates from this on, we will first compute the standard deviation (SD) of the replicates and exclude genes with too high mean SD. For this, we pivot the data into long format as well.

```{r}
all_data_long <- log_df |> 
  pivot_longer(
    cols = contains(c("control", "tau")), 
    names_to = "experiment", 
    values_to = "gene_expression"
  )
```

```{r}
# SD for each experiment type
gene_expression_SD <- all_data_long |> 
  mutate(base_experiment = sub("_\\d+$", "", experiment)) |> 
  group_by(gene_ensembl, base_experiment) |>
  summarize(SD_gene_expression = sd(gene_expression,
                                    na.rm = TRUE),
            .groups = "drop")

# Compute mean of these SDs, per experiment type
gene_expression_SD_mean <- gene_expression_SD |> 
  group_by(gene_ensembl, base_experiment) |>
  mutate(mean_gene_expression = mean(SD_gene_expression, na.rm = TRUE)) |>
  ungroup()

# Find genes with mean SD > 1
high_mean_SD_genes <- gene_expression_SD_mean |>
  filter(mean_gene_expression > 1) |>
  pull(gene_ensembl)


# Filter these genes out
log_df <- log_df |>
  filter(!gene_ensembl %in% high_mean_SD_genes)

```

## Calculating mean of the three groups, and create a statistics data frame

```{r}
stats_df <- log_df |>
  mutate(
    mean_reads_control = rowMeans(across(starts_with("reads_control")),
                          na.rm = TRUE),
    mean_reads_tau = rowMeans(across(starts_with("reads_tau")),
                          na.rm = TRUE),
    mean_RPM_control = rowMeans(across(starts_with("RPM_control")),
                        na.rm = TRUE),
    mean_RPM_tau = rowMeans(across(starts_with("RPM_tau")),
                        na.rm = TRUE),
    mean_RPKM_control = rowMeans(across(starts_with("RPKM_control")),
                         na.rm = TRUE),
    mean_RPKM_tau = rowMeans(across(starts_with("RPKM_tau")),
                         na.rm = TRUE)) |> 
  select(gene_ensembl,
         starts_with("mean"))
```

## Calculate the fold change and create a statistics data frame

Create a separate data set for our statistics and add a fold change variable

```{r}
stats_df <- stats_df |> 
  mutate(
    fold_change_reads = mean_reads_tau - mean_reads_control,
    fold_change_rpm = mean_RPM_tau - mean_RPM_control,
    fold_change_rpkm = mean_RPKM_tau - mean_RPKM_control
  )
```

## Filter Significant genes

For each gene, there is data for 6 experiments. Each of them has 3 replicates. To find out if it is necessary to keep the replicates, or use the average of them in further analysis, we look at log2 fold change of gene expression for each experiment. Then we can filter out the ones with significant fold change (\>1 and \<-1), and use the average of the rest of the replicates.

```{r}
# Find genes with a fold change <-1 or >1
significant_genes <- stats_df |>
  filter(fold_change_reads > 1 | fold_change_reads < -1) |>
  pull(gene_ensembl)

```

```{r}
# Filter these genes out
filtered_stats_df <- stats_df |>
  filter(gene_ensembl %in% significant_genes)

filtered_log_df <- log_df |> 
  filter(gene_ensembl %in% significant_genes)
```

The data is now normalized, mean is calculated for each category and the data is in long format.

## Save data in a files

3 datasets will be saved:

-   A wide data set with all filtered experiments
-   A wide dataset with statistics for all experiments (mean and fold change)
-   A wide dataset with statistics for all filtered experiments (mean and fold change)

```{r}
#For the PCA
filtered_log_df |> 
  write_tsv(file = "../data/03_data_log_load.tsv.gz")
```

```{r}
stats_df |> 
  write_tsv(file = "../data/03_data_stats_load.tsv.gz")
```

```{r}
filtered_stats_df |> 
  write_tsv(file = "../data/03_data_filtered_stats.tsv.gz")
```
