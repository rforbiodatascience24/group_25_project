---
title: "Describe data"
format: html
editor: visual
---

# Load data & libraries

```{r}
#| message: false
library("tidyverse")
library("dplyr")
```

```{r}
data_dir <- "../data"
data_file <- "/03_data_load.tsv.gz" 
describe_input <- read_tsv(str_c(data_dir, data_file))

```

# Size of the data and number of genes

After tidying the data, we now have 522648 genes (observations) and 6 attributes.

```{r}

dim(describe_input)
```

There are 28927 different genes

```{r}
unique_genes <- describe_input |>
  select(gene_ID) |>
  distinct()

dim(unique_genes)
```

Let's look at the experiments. Seems like there are 18 per gene.

```{r}
gene_counts <- describe_input |>
  group_by(gene_ID) |>
  summarise(row_count = n())

gene_counts
```

However, this is not the case. Seems like there are 21 that do not have data for all 18 experiments.

```{r}
problematic_genes <- gene_counts |>
  filter(row_count != 18) |>
  pull(gene_ID)

print(problematic_genes)
```

Let's looks further. These genes seem to double data for same experiments.

```{r}
describe_input |>
  filter(gene_ID == 'DIABLO')
```

# Attributes

For each gene ID, there are

-   mean_reads: raw count of sequencing reads mapped to a gene

-   mean_rpm: normalized value of mean_reads

-   mean_rpkm: normalized value of mean_rpm, by considering length of gene (in kilobases)

-   gene expression value: how much the gene is expressed (i.e. how actively it's producing its corresponding RNA)

# Gene expression values

Let's find the range of the gene expression values. The log transformation performed in the augment explains the negative values

```{r}
gene_expression_summary <- describe_input |>
  #group_by(gene_ID) |>
  summarize(
    mean_value = mean(gene_expression),
    min_value = min(gene_expression),
    max_value = max(gene_expression),
    count = n())

gene_expression_summary
```

# Variation across replicates (all genes)

```{r}
describe_input |> 
  group_by(gene_ID, experiment) |> 
  summarise(
    sd_gene_expression = sd(gene_expression, na.rm = TRUE), # Calculate SD across replicates
    .groups = "drop" # Ungroup data for downstream operations
  ) |> 
  ggplot(aes(x = experiment, y = sd_gene_expression)) +
  geom_boxplot() +
  theme_minimal() +
  theme(text = element_text(size = 8),
        legend.position = 'bottom',
        axis.text.x = element_text(angle = 90,
                                   hjust = 0.5)) +
  labs(
    title = "Boxplot of Gene Expression Standard Deviations Across Replicates",
    x = "Replicates",
    y = "Standard Deviation of Gene Expression"
  )
```

# Variation across replicates (per gene)

For each experiment, there is data for each experiments. To find out if we are it is necessary to keep the replicates, or use the average of them in further analysis, we look at the standard deviation of gene expression for each expression.

Since it is hard to visualize the STD for all 520686 genes, we visualize the top and bottom 20 genes.

```{r}
library(cowplot)
# First, summarize the SD per gene across replicates
sd_per_gene <- describe_input |> 
  group_by(gene_ID, experiment) |> 
  summarise(
    sd_gene_expression = sd(gene_expression, na.rm = TRUE),
    .groups = "drop"
  )

top_variability_genes <- sd_per_gene |> 
  arrange(desc(sd_gene_expression)) |> 
  head(20)  # Get top 20 genes with highest variability

low_variability_genes <- sd_per_gene |> 
  arrange(sd_gene_expression) |> 
  head(20)  # Get top 20 genes with lowest variability


plot1 <- ggplot(data = low_variability_genes,
                mapping = aes(x = gene_ID,
                              y = sd_gene_expression)) +
  labs(title = "Genes with lowest STD across replicates",
       x = "Gene ID",
       y = " Standard deviation per experiment") + 
  geom_boxplot()

plot2 <- ggplot(data = top_variability_genes,
                mapping = aes(x = gene_ID,
                              y = sd_gene_expression)) +
  labs(title = "Genes with highest STD across replicates",
       x = "Gene ID",
       y = " Standard deviation per experiment") + 
  geom_boxplot()

plot_grid(plot1, plot2)
```

# Standard deviation across experiments

The mean of each experiment has been taken by grouping by gene ID and experiment. The mean and standard deviation of gene expression was calculated. Then a box plot was created of the standard deviations to visually understand the significance between different trials.

```{r}
describe_input |> 
  mutate(experiment = substr(experiment, 1, nchar(experiment) - 2)) |> 
  group_by(gene_ID, experiment) |> 
  summarise(
    mean_reads = mean(mean_reads, na.rm = TRUE),
    mean_rpm = mean(mean_rpm, na.rm = TRUE),
    mean_rpkm = mean(mean_rpkm, na.rm = TRUE),
    mean_gene_expression = mean(gene_expression, na.rm = TRUE),
    sd_gene_expression = sd(gene_expression, na.rm = TRUE),
    .groups = "drop"  # Ensure ungrouped data for ggplot
  ) |> 
  ggplot(aes(x = experiment, y = sd_gene_expression)) +
  geom_boxplot() +  # Create boxplot
  theme_minimal() + #Plot visuals
  labs(
    title = "Boxplot of Gene Expression Standard Deviations",
    x = "Experiment",
    y = "Standard Deviation of Gene Expression"
  )
```
